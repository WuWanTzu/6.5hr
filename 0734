def make_rag_prompt(query, relevant_passages):
    """
    將使用者的問題與檢索到的相關段落結合，生成給生成式模型（如 Gemini）使用的提示字串。

    參數：
        query (str): 使用者的原始問題。
        relevant_passages (list of str): 從資料庫中檢索到的相關段落。

    回傳：
        str: 格式化後的提示字串。
    """
    if not query:
        raise ValueError("Query should not be empty.")
    
    # 確保 relevant_passages 是一個列表，且不為空
    if not isinstance(relevant_passages, list) or not relevant_passages:
        raise ValueError("Relevant passages must be a non-empty list of strings.")

    # 將相關段落合併成一個單一字串
    combined_passages = " ".join(relevant_passages) # 這裡用空格連接，以確保單行

    # 按照要求的單行格式建構提示字串
    prompt = f"Based on the following information: {combined_passages}, please answer this question: {query}"
    
    return prompt

# 範例測試 (你可以在你的環境中執行這個，但提交時只需要 make_rag_prompt 函式本身)
if __name__ == "__main__":
    query_example = "What is RAG?"
    passages_example = [
        "RAG stands for Retrieval-Augmented Generation.",
        "It combines retrieval-based and generation-based AI models."
    ]
    
    final_prompt = make_rag_prompt(query_example, passages_example)
    print(final_prompt)
    # 預期輸出: Based on the following information: RAG stands for Retrieval-Augmented Generation. It combines retrieval-based and generation-based AI models., please answer this question: What is RAG?
